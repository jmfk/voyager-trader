name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with Black
      run: |
        black --check src/ tests/

    - name: Type checking with mypy
      run: |
        mypy src/ --ignore-missing-imports || echo "::warning::Type checking completed with issues"

    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        PYTHONPATH: src

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing --cov-fail-under=80
      env:
        PYTHONPATH: src

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]
        pip install -r requirements.txt

    - name: Run safety check for vulnerable packages
      run: |
        safety check --json || echo "::warning::Security vulnerabilities detected in dependencies"

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json || echo "::warning::Security issues detected in source code"

  build-check:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Test package build
      run: |
        # Create a minimal setup.py for testing build
        cat > setup.py << 'EOF'
        from setuptools import setup, find_packages

        setup(
            name="voyager-trader",
            version="0.1.0",
            packages=find_packages(where="src"),
            package_dir={"": "src"},
            python_requires=">=3.10",
        )
        EOF
        python -m build

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import voyager_trader; print('Package import successful')"

  conventional-commits:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check conventional commit format
      run: |
        # Check if PR title follows conventional commit format
        PR_TITLE="${{ github.event.pull_request.title }}"
        if ! echo "$PR_TITLE" | grep -E "^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?: .{1,50}"; then
          echo "::error::PR title must follow conventional commit format: type(scope): description"
          echo "::error::Examples: 'feat: add new trading strategy', 'fix(core): resolve memory leak'"
          exit 1
        fi

        # Check commit messages in the PR
        COMMITS=$(git log --format="%s" origin/main..HEAD)
        while IFS= read -r commit; do
          if ! echo "$commit" | grep -E "^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?: .+"; then
            echo "::warning::Commit message should follow conventional format: $commit"
          fi
        done <<< "$COMMITS"
