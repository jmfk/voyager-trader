name: Auto-close Issues on PR Merge

on:
  pull_request:
    types: [closed]

jobs:
  auto-close-issues:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: read

    steps:
      - name: Auto-close referenced issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');

            // Keywords that indicate an issue should be closed
            const closingKeywords = [
              'close', 'closes', 'closed',
              'fix', 'fixes', 'fixed',
              'resolve', 'resolves', 'resolved',
              'implement', 'implements', 'implemented'
            ];

            // Function to extract issue numbers from text
            function extractIssueNumbers(text) {
              if (!text) return [];

              const issueNumbers = new Set();
              const lowerText = text.toLowerCase();

              // Match patterns like "fixes #123", "closes #456", etc.
              const keywordPattern = new RegExp(
                `\\b(${closingKeywords.join('|')})\\s+#(\\d+)\\b`,
                'gi'
              );

              let match;
              while ((match = keywordPattern.exec(lowerText)) !== null) {
                issueNumbers.add(parseInt(match[2]));
              }

              // Also match simple "#123" patterns for additional coverage
              const hashPattern = /#(\d+)\b/g;
              while ((match = hashPattern.exec(lowerText)) !== null) {
                const issueNum = parseInt(match[1]);
                // Only include if it's mentioned near a closing keyword
                const beforeContext = lowerText.substring(Math.max(0, match.index - 50), match.index);
                const afterContext = lowerText.substring(match.index + match[0].length, Math.min(lowerText.length, match.index + match[0].length + 50));

                if (closingKeywords.some(keyword =>
                  beforeContext.includes(keyword) || afterContext.includes(keyword)
                )) {
                  issueNumbers.add(issueNum);
                }
              }

              return Array.from(issueNumbers);
            }

            const pr = context.payload.pull_request;

            // Extract issue numbers from PR title and body
            const titleIssues = extractIssueNumbers(pr.title);
            const bodyIssues = extractIssueNumbers(pr.body);
            const allIssues = [...new Set([...titleIssues, ...bodyIssues])];

            console.log(`Found potential issues to close: ${allIssues.join(', ')}`);

            // Close each referenced issue
            for (const issueNumber of allIssues) {
              try {
                // First, check if the issue exists and is open
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber
                });

                if (issue.state === 'open') {
                  // Close the issue with a comment
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    state: 'closed',
                    state_reason: 'completed'
                  });

                  // Add a comment explaining the closure
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueNumber,
                    body: `üéâ This issue has been automatically closed because it was referenced in the merged PR #${pr.number}: "${pr.title}"\n\nIf this was closed in error, please feel free to reopen it.`
                  });

                  console.log(`‚úÖ Successfully closed issue #${issueNumber}`);
                } else {
                  console.log(`‚ÑπÔ∏è Issue #${issueNumber} is already ${issue.state}`);
                }
              } catch (error) {
                console.error(`‚ùå Error processing issue #${issueNumber}:`, error.message);

                // If issue doesn't exist, log it but don't fail the workflow
                if (error.status === 404) {
                  console.log(`‚ÑπÔ∏è Issue #${issueNumber} does not exist - skipping`);
                } else {
                  // For other errors, we might want to fail
                  throw error;
                }
              }
            }

            // Summary
            if (allIssues.length === 0) {
              console.log('‚ÑπÔ∏è No issues found to close in this PR');
            } else {
              console.log(`üèÅ Processed ${allIssues.length} issue(s): ${allIssues.join(', ')}`);
            }

      - name: Add PR comment with closure summary
        if: steps.auto-close-issues.outputs.closed_issues
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');

            // This step would run if we had closed issues
            // For now, we'll just log that issues were processed
            console.log('Issues processing completed');
