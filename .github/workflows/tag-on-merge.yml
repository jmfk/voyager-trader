name: Tag on Merge

on:
  push:
    branches:
      - main  # or 'master' ‚Äî change to match your default branch

jobs:
  create-tag:
    if: github.event.head_commit.message != ''  # Optional safeguard
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history including tags

      - name: Set up Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Get highest version tag
        id: get_tag
        run: |
          # Get all tags, filter for semantic version format, and find the highest one
          HIGHEST_TAG=$(git tag -l "t*.*.*" | sort -V | tail -n 1)
          if [ -z "$HIGHEST_TAG" ]; then
            HIGHEST_TAG="t0.0.0"
          fi
          echo "latest_tag=$HIGHEST_TAG" >> $GITHUB_OUTPUT
          echo "Found highest version tag: $HIGHEST_TAG"

      - name: Bump patch version
        id: bump_version
        run: |
          OLD=${{ steps.get_tag.outputs.latest_tag }}
          echo "Current highest version: $OLD"

          # Remove all leading 't' characters to fix corrupted tags like 'tt0.0.1' or 'ttt0.0.2'
          # This handles both correct tags (t0.0.0) and corrupted ones (tt0.0.1, ttt0.0.2)
          CLEANED_TAG=$(echo "$OLD" | sed 's/^t*//')
          echo "Cleaned tag (removed all leading 't'): $CLEANED_TAG"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CLEANED_TAG"
          echo "Parsed - MAJOR: $MAJOR, MINOR: $MINOR, PATCH: $PATCH"

          # Increment patch version (lowest version number)
          PATCH=$((PATCH + 1))
          NEW_TAG="t$MAJOR.$MINOR.$PATCH"

          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEW_TAG"

      - name: Push tag with PAT
        run: |
          git tag ${{ steps.bump_version.outputs.new_tag }}
          echo "üîê Using PAT to push tag"
          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}
          git push --force origin ${{ steps.bump_version.outputs.new_tag }}
        env:
            TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  contents: write
